%Creates n no of agents where kk defines the duration with which the second leader wait before starting to follow
%the first leader again
yw = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9];
for nu = 1:3
for pp = 1:9
rng default

global px; global py; global theta_all; global phi_all;global pz;
theta_all=[];phi_all=[];global theta;
%prompt1 = 'What is the number of steps? ';
%prompt2 = 'What is the number of Agents? ';
%prompt3 = 'fraction of following times? ';
 
step_num = 1000;
no_of_agents = 9;
percent_follow = yw(pp);
%newly_swept_areas=[];



%Trajectory generating section
x = [0 1 2.5 3.6 5 7 8.1 10];
y = sin(x);
xb = 0:.01:10;
yb = spline(x,y,xb);
ybd = diff(yb);xbd = diff(xb);


for me = 1:100
xx = -1*rand(1,no_of_agents); yy = -1*rand(1,no_of_agents);zz = yy;
px = [];py = [];pz = [];r2 = [];surface_area = [];turn_angle = [];r = [];

 
 R = 10 ;nBinsX = 8 ;nBinsY = 8 ;xg = linspace( -R, R, nBinsX+1 ) ;
 yg= linspace(-R, R, nBinsY+1 );nCells = nBinsX * nBinsY ;
  
  
 % - Build figure.
 figure(1) ;  clf ;  hold on ;
 set( gcf, 'Color', 'w', 'Units', 'Normalized', ...
      'Position', [0.1,0.1,0.6,0.6] );
   
   
 % - Plot grid.
 plot( [xg;xg], repmat( [-R;R], 1, numel(xg)), 'Color', 0.8*[1,1,1] ) ;
 plot( repmat( [-R;R], 1, numel( yg )), [yg;yg], 'Color', 0.8*[1,1,1] ) ;
 xlim( 1.5*[-R,R] ) ;  ylim( 1.5*[-R,R] ) ;
  
 % - Plot cell IDs.
 labels = arrayfun( @(k)sprintf( '%d', k ), 1:nCells, 'UniformOutput', false ) ;
 [X,Y]  = meshgrid( (xg(1:end-1)+xg(2:end))/2, (yg(1:end-1)+yg(2:end))/2 ) ;
 text( X(:), Y(:), labels, 'Color', 'b', 'FontSize', 14 ) ;
 

 for i = 1:step_num
     %theta = 360*rand(1,no_of_agents);%Polar angle
     %phi   = 180*rand(1,no_of_agents);%Azimuth angle
     theta = 360*rand(1,1);theta = horzcat(theta,zeros(1,no_of_agents-1));
     phi   = 180*rand(1,1);phi = horzcat(phi,zeros(1,no_of_agents-1));
     theta
     phi
     xx
     theta_all = vertcat(theta_all,theta(1));phi_all = vertcat(phi_all,phi(1));
     xx = xx + xbd(i);
     %sind(phi).*cosd(theta);
     px = [px;xx];
     yy = yy + ybd(i);
     %sind(phi).*sind(theta); 
     py = [py;yy];
     %zz = zz + cosd(phi);
     %pz = [pz;zz];
     
       theta = [];phi=[];
%      ux = px(2,2);uy=py(2,2);uz=pz(2,2);
%      kx=[];ky=[];kz=[];
       la = (1-percent_follow)*step_num ;la = round(la);
       la
       i
       kk = 9;
       if i>=la
            ux = px(la-1,nu+1:no_of_agents);uy=py(la-1,nu+1:no_of_agents);
            thetax = randn(1,nu+1:no_of_agents);thetay = randn(1,nu+1:no_of_agents);
            ux = ux+thetax;uy = uy + thetay;
            px(i,nu+1:no_of_agents)=ux;py(i,nu+1:no_of_agents)=uy;
       else
       end
      
     CM = jet(no_of_agents);
     for j = 1:no_of_agents
        h(j) = animatedline('color',CM(j,:));
        %addpoints(h(j),px(:,j),py(:,j),pz(:,j));
        addpoints(h(j),px(:,j),py(:,j));
     end
      
     set(gca,'XTickLabel',[]);
     set(gca,'YTickLabel',[]);
     drawnow 
     pause(.1)
     mov(i) = getframe(gcf); 
 end
   

%This computes the turn angle from the x and y data.
px1 = diff(px);py1 = diff(py);dd = atan2(py1,px1);dd1 = diff(dd);
end

end
end
